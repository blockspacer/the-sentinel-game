

#ifndef GAME_ENUMS_H
#define GAME_ENUMS_H


enum Object_States
{
	OBJECT_NORMAL,
	OBJECT_MATERIALIZING, // specifically, trees generated by the Sentinel
	OBJECT_ABSORBING,
	OBJECT_ABSORBED, //object fully absorbed but should not be deleted yet
	OBJECT_DEAD,     //object can be deleted immediately
	OBJECT_OFFLIMITS //object must not be deleted
};

enum Object_Types
{
	OBJECT_START = -1,
	
	OBJECT_TREE,
	OBJECT_BOULDER,
	OBJECT_SYNTHOID_SHELL,
	OBJECT_ENEMY,
	OBJECT_SENTINEL_PLINTH,	
	OBJECT_END
};


enum Player_States 
{
	//in level
	PLAYER_ACTIVE,
	PLAYER_TRANSFERRING,
	PLAYER_KILLED,
	PLAYER_DEFEATED_SENTINEL,
	PLAYER_WINS_LEVEL
};

enum UserAction 
{
	NOACTION, 
	PAUSE,
	
	ABSORB,
	CREATE_SYNTHOID_SHELL,
	TRANSFER_TO_SYNTHOID,
	CREATE_TREE,
	CREATE_BOULDER,
	HYPERSPACE
};


enum level_status 
{
	LEVEL_INPROGRESS, 
	LEVEL_PAUSED,
	LEVEL_GAMEOVER, 
	LEVEL_HYPERSPACE, 
	LEVEL_ADVANCE
};


// Raycasting

enum RaycastType
{
	TERRAIN_ONLY,
	TERRAIN_AND_BOULDERS,
	TERRAIN_AND_BOULDERS_AND_PLINTH
};

enum HitType
{
	TERRAIN_HIT,
	BOULDER_AABB_HIT,
	SENTINEL_PLINTH_HIT
};

struct HitData
{
	bool m_hit;
	float m_t;
	HitType m_type;
	
	int m_square;             // output in the case of a terrain hit
	class Boulder* m_boulder; // output in the case of a boulder hit
};


#endif //GAME_ENUMS_H