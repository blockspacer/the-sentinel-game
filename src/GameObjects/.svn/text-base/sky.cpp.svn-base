
#include "Game.h"
#include "math.h"
#include "sky.h"

float ran2(long *idum);

Sky::Sky() //constructor
{
}


Sky::~Sky() //destructor
{
	//remember to free up textures
	TextureLibrary *texturelibrary = Game::getTextureLibrary();
	string resourcepath = FileUtils::GetApplicationResourcesFolderPath();
	
	texturelibrary->FreeTexture(resourcepath + kMoonTexture512);
	texturelibrary->FreeTexture(resourcepath + kStar1);

	string skyboxpath = resourcepath + kSkybox;
	texturelibrary->FreeTexture(skyboxpath + kUP);
	texturelibrary->FreeTexture(skyboxpath + kDOWN);
	texturelibrary->FreeTexture(skyboxpath + kLEFT);
	texturelibrary->FreeTexture(skyboxpath + kRIGHT);
	texturelibrary->FreeTexture(skyboxpath + kBACK);
	texturelibrary->FreeTexture(skyboxpath + kFRONT);
}	

void Sky::Init()
{
	World *pWorld = Game::getWorld();
	float tes = pWorld->terrain->getTerrainEdgeSize();
	deg_to_rad = M_PI/180.0;
	rad_to_deg = 180.0/M_PI;
		
	int sun_index = 0;
	float sundistance = 5.0*tes; //horizontal distance to billboard center
	static long seed = -70;
	double phi_sun = 2.0*M_PI*ran2(&seed);
	azimuth[sun_index] = deg_to_rad*60.0; //angle from pole 
	angularsize[sun_index] = deg_to_rad*30.0; //billboard angular width
	sundir[0] = (float)cos(phi_sun)*sin(azimuth[sun_index]);
	sundir[1] = (float)sin(phi_sun)*sin(azimuth[sun_index]);
	sundir[2] = (float)cos(azimuth[sun_index]);
	location[sun_index][0] = sundistance*sundir[0];
	location[sun_index][1] = sundistance*sundir[1];
	location[sun_index][2] = sundistance*sundir[2];
	radius[sun_index] = sundistance*tan(0.5*angularsize[sun_index]); 
				
	float starshell = 7.0*tes;
	float minstarsize = 0.5; //degrees
	float maxstarsize = 4.0; //degrees
	float color_mag = 0.25; //magnitude of tint
	double phi_star;
	for (int i=1;i<=Nstars;i++) 
	{
		do {
			phi_star = 2.0*M_PI*ran2(&seed);
			azimuth[i] = acos(2.0*ran2(&seed)-1.0);
			stardir[i-1][0] = (float)cos(phi_star)*sin(azimuth[i]);
			stardir[i-1][1] = (float)sin(phi_star)*sin(azimuth[i]);
			stardir[i-1][2] = (float)cos(azimuth[i]);			
		}
		while ( scalarprod(stardir[i-1],sundir) > cos(0.5*angularsize[sun_index]) );
		angularsize[i] = minstarsize + (maxstarsize-minstarsize)*ran2(&seed);
		location[i][0] = starshell*stardir[i-1][0];
		location[i][1] = starshell*stardir[i-1][1];
		location[i][2] = starshell*stardir[i-1][2];
		radius[i] = starshell*tan(0.5*angularsize[i]*deg_to_rad); 
		tint[0][i] = (1.0-color_mag) + color_mag*ran2(&seed);
		tint[1][i] = (1.0-color_mag) + color_mag*ran2(&seed);
		tint[2][i] = (1.0-color_mag) + color_mag*ran2(&seed);
	}
	
	for (int n=0;n<Nbillboards;n++) 
	{
		//BL
		billb_vertex[n][0][0] = -radius[n];
		billb_vertex[n][0][1] = -radius[n];
		billb_vertex[n][0][2] = 0.0;

		billb_texcs[n][0][0] = 0.0;
		billb_texcs[n][0][1] = 0.0;
		
		//BR
		billb_vertex[n][1][0] = radius[n];
		billb_vertex[n][1][1] = -radius[n];
		billb_vertex[n][1][2] = 0.0;

		billb_texcs[n][1][0] = 1.0;
		billb_texcs[n][1][1] = 0.0;
		
		//TR
		billb_vertex[n][2][0] = radius[n];
		billb_vertex[n][2][1] = radius[n];		
		billb_vertex[n][2][2] = 0.0;

		billb_texcs[n][2][0] = 1.0;
		billb_texcs[n][2][1] = 1.0;

		//TL
		billb_vertex[n][3][0] = -radius[n];
		billb_vertex[n][3][1] = radius[n];
		billb_vertex[n][3][2] = 0.0;

		billb_texcs[n][3][0] = 0.0;
		billb_texcs[n][3][1] = 1.0;
	}
	
	
	//skybox	
	sbox_edge = 1.0*tes;

	//define corner vertices
	for (int corn = 0; corn < 8; ++corn)
		for (int i = 0; i < 3; ++i)		
			sbox_corners[corn][i] = sbox_edge * ( -0.5 + ((corn >> i) & 1) );
	
	//4 corner vertices of each face
	int faces[6][4] = 
	{{1,0,4,5},  //FRONT				
	 {2,3,7,6},  //BACK		
	 {0,2,6,4},  //LEFT
	 {3,1,5,7},  //RIGHT
	 {5,4,6,7},  //UP
	 {0,1,3,2}}; //DOWN
	//tex coords of each face vertex
	double faces_tx[4][2] =
	{ {0.0,1.0}, {1.0,1.0}, {1.0,0.0}, {0.0,0.0} };
	
	for (int i = 0; i < 6; ++i)
		for (int j = 0; j < 4; ++j)
			sbox_faces[i][j] = faces[i][j];
	for (int i = 0; i < 4; ++i)
		for (int j = 0; j < 2; ++j)
			sbox_faces_tx[i][j] = faces_tx[i][j];
}


void Sky::loadTextures()
{
	TextureLibrary *texturelibrary = Game::getTextureLibrary();
	string resourcepath = FileUtils::GetApplicationResourcesFolderPath();

	mTexture_moon = texturelibrary->GetTexture(resourcepath + kMoonTexture512, NO_MIPMAPS);
	mTexture_star1 = texturelibrary->GetTexture(resourcepath + kStar1, NO_MIPMAPS);
	
	string skyboxpath = resourcepath + kSkybox;
	
	mTexture_sky[SKY_UP]    = texturelibrary->GetTexture(skyboxpath + kUP, NO_MIPMAPS);
	mTexture_sky[SKY_DOWN]  = texturelibrary->GetTexture(skyboxpath + kDOWN, NO_MIPMAPS);
	mTexture_sky[SKY_LEFT]  = texturelibrary->GetTexture(skyboxpath + kLEFT, NO_MIPMAPS);
	mTexture_sky[SKY_RIGHT] = texturelibrary->GetTexture(skyboxpath + kRIGHT, NO_MIPMAPS);
	mTexture_sky[SKY_BACK]  = texturelibrary->GetTexture(skyboxpath + kBACK, NO_MIPMAPS);
	mTexture_sky[SKY_FRONT] = texturelibrary->GetTexture(skyboxpath + kFRONT, NO_MIPMAPS);
}

inline void Sky::billboardEnd() {
	
	// restore the previously 
	// stored modelview matrix
	glPopMatrix();
}

void Sky::draw(void)
{
	Player *pPlayer = Game::getPlayer();
	float viewAngle, viewAzimuth;
	pPlayer->GetViewAngles(&viewAngle, &viewAzimuth);
	//float *view_dir = pPlayer->GetViewDirection();
	float *view_point = pPlayer->GetViewPoint();
	
	glDisable(GL_LIGHTING);
	glDisable(GL_FOG); 	//turn off fog while drawing sky
	glDisable(GL_DEPTH_TEST);	
	glEnable(GL_TEXTURE_2D);
	
	glEnable(GL_POLYGON_OFFSET_FILL);
	glPolygonOffset(1.0,1.0);

	//sky box
	glDisable(GL_DEPTH_TEST);	

	enum sky_directions sd;
	
	glPushMatrix();
	glTranslatef(view_point[0], view_point[1], view_point[2]);

	for (sd = SKY_FRONT; sd<=SKY_DOWN; sd=(sky_directions)(sd+1)) 
	{
		mTexture_sky[sd]->Apply();
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
		
		glBegin(GL_QUADS);
		for (int a=0;a<4;a++) 
		{
			glTexCoord2d(sbox_faces_tx[a][0], sbox_faces_tx[a][1]);
			glVertex3d( sbox_corners[ sbox_faces[sd][a] ][0] ,
						sbox_corners[ sbox_faces[sd][a] ][1] ,
						sbox_corners[ sbox_faces[sd][a] ][2] );
		}
		glEnd();
		
		//draw edges
		/*
		 glColor3f(0.0,0.0,1.0);
		 glBegin(GL_LINE_LOOP);
		 for (int a=0;a<4;a++) {
			glVertex3f( sbox_corners[ sbox_faces[sd][a] ][0] ,
						sbox_corners[ sbox_faces[sd][a] ][1] ,
						sbox_corners[ sbox_faces[sd][a] ][2] );
		}
		 glEnd();
		 glColor3f(1.0,1.0,1.0);	
		 */
	}
	
	glDisable(GL_POLYGON_OFFSET_FILL);
	glPopMatrix();

	
	
	/*
	glEnable(GL_DEPTH_TEST);	
	glEnable(GL_BLEND);
    glBlendFunc(GL_SRC_ALPHA,GL_ONE_MINUS_SRC_ALPHA);
	
	glTexEnvf(GL_TEXTURE_ENV,GL_TEXTURE_ENV_MODE,GL_MODULATE);
	
    mTexture_star1->Apply();	
	
	for (int n=1;n<=Nstars;n++) 
	{
		glColor3f(tint[0][n],tint[1][n],tint[2][n]);
		
		billboardSphericalBegin(view_point[0], view_point[1], view_point[2],
								location[n][0], location[n][1], location[n][2]);
		
		glBegin(GL_QUADS);
		for (int a=0;a<4;a++) {
			glTexCoord2f(billb_texcs[n][a][0],
						 billb_texcs[n][a][1]);
			glVertex3f(billb_vertex[n][a][0],
					   billb_vertex[n][a][1],
					   billb_vertex[n][a][2]);
		}
		glEnd();
		
		billboardEnd();
	}
	
	glColor3f(1.0,1.0,1.0);
	int sun_index = 0;
	mTexture_moon->Apply();	
	
	billboardSphericalBegin(view_point[0], view_point[1], view_point[2],
							location[sun_index][0], 
							location[sun_index][1], 
							location[sun_index][2]);
	
	glBegin(GL_QUADS);
	for (int a=0;a<4;a++) {
		glTexCoord2f(billb_texcs[sun_index][a][0],
					 billb_texcs[sun_index][a][1]);
		glVertex3f(billb_vertex[sun_index][a][0],
				   billb_vertex[sun_index][a][1],
				   billb_vertex[sun_index][a][2]);
	}
	glEnd();		
	billboardEnd();
	*/
	
	glEnable(GL_FOG);	
}


void Sky::billboardSphericalBegin(float camX, float camY, float camZ,
							      float relobjPosX, float relobjPosY, float relobjPosZ) {
	
	float objPosX, objPosY, objPosZ;
	float lookAt[3], objToCamProj[3], objToCam[3], upAux[3];
	float angleCosine;
	
	objPosX = camX + relobjPosX;
	objPosY = camY + relobjPosY;
	objPosZ = camZ + relobjPosZ;
	
	glPushMatrix();
	
	glTranslatef(objPosX, objPosY, objPosZ);	
	
	// objToCamProj is the vector in world coordinates from the 
	// local origin to the camera projected in the XZ plane
	objToCamProj[0] = -relobjPosX ;
	objToCamProj[1] = 0;
	objToCamProj[2] = -relobjPosZ ;
	
	// This is the original lookAt vector for the object 
	// in world coordinates
	lookAt[0] = 0;
	lookAt[1] = 0;
	lookAt[2] = 1;
	
	// normalize both vectors to get the cosine directly afterwards
	normalize(objToCamProj);
	
	// easy fix to determine wether the angle is negative or positive
	// for positive angles upAux will be a vector pointing in the 
	// positive y direction, otherwise upAux will point downwards
	// effectively reversing the rotation.
	crossprod(lookAt,objToCamProj,upAux);
		
	// compute the angle
	angleCosine = scalarprod(lookAt,objToCamProj);
	
	// perform the rotation. The if statement is used for stability reasons
	// if the lookAt and objToCamProj vectors are too close together then 
	// |angleCosine| could be bigger than 1 due to lack of precision
	if ((angleCosine < 0.99990) && (angleCosine > -0.9999))
		glRotatef(acos(angleCosine)*rad_to_deg, upAux[0], upAux[1], upAux[2]);	
	
	// so far it is just like the cylindrical billboard. The code for the 
	// second rotation comes now
	// The second part tilts the object so that it faces the camera
	
	// objToCam is the vector in world coordinates from 
	// the local origin to the camera
	objToCam[0] = camX - objPosX;
	objToCam[1] = camY - objPosY;
	objToCam[2] = camZ - objPosZ;
	
	// Normalize to get the cosine afterwards
	normalize(objToCam);
	
	// Compute the angle between objToCamProj and objToCam, 
	//i.e. compute the required angle for the lookup vector
	angleCosine = scalarprod(objToCamProj,objToCam);
	
	// Tilt the object. The test is done to prevent instability 
	// when objToCam and objToCamProj have a very small
	// angle between them
	if ((angleCosine < 0.99990) && (angleCosine > -0.9999))
		if (objToCam[1] < 0)
			glRotatef(acos(angleCosine)*rad_to_deg,1,0,0);	
		else
			glRotatef(acos(angleCosine)*rad_to_deg,-1,0,0);	
	
}

